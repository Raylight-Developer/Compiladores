Semantic_Analyzer.py:
Tomar en cuenta que crashea de manera inesperada. En este caso, se notó que cuando se tiene visitComparison y visitEquality
activos, estos funcionan, pero la precedencia falla. Cuando estos se desactvida, la precedencia funciona.

En caso de no quere comentar tales metodos, hacerlo manual. Justo como esta ahora.

El problema anterior se solucionón, ahora hay otro, en este caso, es con el tema de bloques
var test = 10 + (3*5);
var nice12;
{
	var nice;
}
{
	var compis;
	var compis1;
	var test;
	{
		var prueba;
		var compis;
	}
}

var compis;
var nice;
var nice1;


var test = 10 + (3*5);
var x = 0;
var miau = test * x;
FALLA miau, no infiere tipo y valor


{} {}
25
Entering scope: scope1
scope1
{'test': 'global'} {}
Exiting scope: scope1
Entering scope: scope2
scope2
{'test': 'global', 'nice': 'scope1'} {}
scope2
{'test': 'global', 'nice': 'scope1', 'compis': 'scope2'} {}
Exiting scope: scope2
global_0
{'test': 'global', 'nice': 'scope1', 'compis': 'scope2', 'compis1': 'scope2'} {'compis': None}
global_0
{'test': 'global', 'nice': 'scope1', 'compis': 'global', 'compis1': 'scope2'} {'compis': None, 'nice': None}

{} {}
25
Entering scope: scope3
scope3
{'test': 'global'} {}
Exiting scope: scope3
Entering scope: scope4
scope4
{'test': 'global', 'nice': 'scope3'} {}
scope4
{'test': 'global', 'nice': 'scope3', 'compis': 'scope4'} {}
Exiting scope: scope4
global_0
{'test': 'global', 'nice': 'scope3', 'compis': 'scope4', 'compis1': 'scope4'} {'compis': None}
global_0
{'test': 'global', 'nice': 'scope3', 'compis': 'global', 'compis1': 'scope4'} {'compis': None, 'nice': None}
global_0

Estos valores no se deberian almacenar asi en visitVarDecl, validar mas adelante, pues se dejara comentario


El for esta truqueado, pues si declaro una variable tipo var i, en el mismo scope del for, en el incremento de i = i + 1 no la reconoce
pero si pongo una constante en esa are y luego la regreso al valor de i, si la reconoce
Antes
var test = 10 + (3*5);
for(var i = 0; 1 < 1; 1){
}
Despues
var test = 10 + (3*5);
for(var i = 0; 1 < 1; i = i + 1){
}